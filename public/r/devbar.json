{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "devbar",
  "type": "registry:component",
  "title": "DevBar",
  "description": "Full standalone DevBar component - copy the entire implementation into your project for complete control",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "path": "registry/devbar/devtoolbar.tsx",
      "content": "import React, { useState, useEffect, useMemo, useCallback, ReactNode, ComponentType } from 'react';\nimport { Bug, X, Maximize2, Minimize2 } from 'lucide-react';\n\n// Typography system with Inconsolata\nconst FONT_FAMILY = '\"Inconsolata\", \"SF Mono\", \"Monaco\", \"Fira Code\", \"Geist Mono\", monospace';\n\nconst typography = {\n  title: {\n    fontFamily: FONT_FAMILY,\n    fontSize: '0.7rem',\n    fontWeight: 600,\n    letterSpacing: '0.05em',\n    textTransform: 'uppercase' as const,\n  },\n  tab: {\n    fontFamily: FONT_FAMILY,\n    fontSize: '0.7rem',\n    fontWeight: 500,\n    letterSpacing: '0.03em',\n    textTransform: 'uppercase' as const,\n  },\n  sectionTitle: {\n    fontFamily: FONT_FAMILY,\n    fontSize: '0.75rem',\n    fontWeight: 600,\n    letterSpacing: '0.05em',\n    textTransform: 'uppercase' as const,\n  },\n  info: {\n    fontFamily: FONT_FAMILY,\n    fontSize: '0.7rem',\n    fontWeight: 400,\n    lineHeight: 1.4,\n  },\n  button: {\n    xs: {\n      fontFamily: FONT_FAMILY,\n      fontSize: '0.75rem',\n      fontWeight: 500,\n    },\n    sm: {\n      fontFamily: FONT_FAMILY,\n      fontSize: '0.8rem',\n      fontWeight: 500,\n    },\n  },\n} as const;\n\nexport interface DevToolbarTab {\n  id: string;\n  label: string;\n  icon?: ComponentType<{ size?: number | string; className?: string }>;\n  content: ReactNode | (() => ReactNode);\n}\n\nexport interface DevToolbarProps {\n  tabs: DevToolbarTab[];\n  position?: 'bottom-right' | 'bottom-left' | 'top-right' | 'top-left' | 'pane';\n  defaultTab?: string;\n  className?: string;\n  theme?: 'dark' | 'light' | 'auto';\n  hideInProduction?: boolean;\n  environment?: 'development' | 'staging' | 'production' | string;\n  customIcon?: ReactNode;\n  title?: string;\n  width?: string;\n  maxHeight?: string;\n  defaultPaneHeight?: string;\n  defaultOpen?: boolean;\n}\n\nconst DevToolbarComponent: React.FC<DevToolbarProps> = ({\n  tabs,\n  position = 'bottom-right',\n  defaultTab,\n  className = '',\n  theme = 'auto',\n  hideInProduction = true,\n  environment,\n  customIcon,\n  title = 'Dev',\n  width = '280px',\n  maxHeight = '220px',\n  defaultPaneHeight = '300px',\n  defaultOpen = false,\n}) => {\n  const [isCollapsed, setIsCollapsed] = useState(!defaultOpen);\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [activeTab, setActiveTab] = useState(defaultTab || tabs[0]?.id || '');\n  const [paneHeight, setPaneHeight] = useState(defaultPaneHeight);\n  const [isResizing, setIsResizing] = useState(false);\n  \n  // Determine actual theme based on 'auto' setting\n  const [actualTheme, setActualTheme] = useState<'light' | 'dark'>('dark');\n  \n  // Handle theme detection for 'auto' mode\n  useEffect(() => {\n    if (theme !== 'auto') {\n      setActualTheme(theme);\n      return;\n    }\n    \n    if (typeof window === 'undefined') {\n      return;\n    }\n    \n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    setActualTheme(mediaQuery.matches ? 'dark' : 'light');\n    \n    const handler = (e: MediaQueryListEvent) => {\n      setActualTheme(e.matches ? 'dark' : 'light');\n    };\n    \n    mediaQuery.addEventListener('change', handler);\n    return () => mediaQuery.removeEventListener('change', handler);\n  }, [theme]);\n  \n  // Clean visibility logic - respects explicit environment prop\n  const isVisible = useMemo(() => {\n    if (typeof window === 'undefined') return false; // SSR safety\n    \n    // If hideInProduction is false, always show\n    if (!hideInProduction) return true;\n    \n    // Use explicit environment prop if provided\n    if (environment) {\n      return environment !== 'production';\n    }\n    \n    // Fall back to NODE_ENV only if no environment prop provided\n    // Safely check for process.env without TypeScript errors\n    try {\n      // @ts-ignore - process may not exist in some environments\n      const nodeEnv = typeof process !== 'undefined' ? process.env?.NODE_ENV : undefined;\n      if (nodeEnv) {\n        return nodeEnv !== 'production';\n      }\n    } catch {\n      // process is not defined, continue\n    }\n    \n    // Default to showing if we can't determine environment\n    return true;\n  }, [hideInProduction, environment]);\n  \n  // Handle resize for pane mode\n  useEffect(() => {\n    if (!isResizing) return;\n    \n    const handleMouseMove = (e: MouseEvent) => {\n      const newHeight = window.innerHeight - e.clientY;\n      const minHeight = 100;\n      const maxHeight = window.innerHeight * 0.8;\n      \n      if (newHeight >= minHeight && newHeight <= maxHeight) {\n        setPaneHeight(`${newHeight}px`);\n      }\n    };\n    \n    const handleMouseUp = () => {\n      setIsResizing(false);\n    };\n    \n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n    \n    return () => {\n      document.removeEventListener('mousemove', handleMouseMove);\n      document.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, [isResizing]);\n  \n  // Add ESC key handler\n  useEffect(() => {\n    if (position !== 'pane' || isCollapsed) return;\n    \n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        setIsCollapsed(true);\n      }\n    };\n    \n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [position, isCollapsed]);\n  \n  // SSR-safe rendering: return null during SSR, actual content after hydration\n  if (!isVisible) {\n    return null;\n  }\n  \n  // Button positioned with minimal spacing (8px from edges)\n  const buttonStyles: Record<string, React.CSSProperties> = {\n    'bottom-right': { \n      position: 'fixed' as const, \n      bottom: '8px',\n      right: '8px',\n      zIndex: 9999,\n    },\n    'bottom-left': { \n      position: 'fixed' as const, \n      bottom: '8px',\n      left: '8px',\n      zIndex: 9999,\n    },\n    'top-right': { \n      position: 'fixed' as const, \n      top: '8px',\n      right: '8px',\n      zIndex: 9999,\n    },\n    'top-left': { \n      position: 'fixed' as const, \n      top: '8px',\n      left: '8px',\n      zIndex: 9999,\n    },\n    'pane': { \n      position: 'fixed' as const, \n      bottom: '8px',\n      right: '8px',\n      zIndex: 9999,\n    },\n  };\n  \n  // Panel positioned at corner with minimal spacing to match button\n  const panelStyles: Record<string, React.CSSProperties> = {\n    'bottom-right': { \n      position: 'fixed' as const, \n      bottom: '8px', \n      right: '8px',\n      transform: isExpanded ? 'none' : 'none',\n      transformOrigin: 'bottom right',\n      backgroundColor: actualTheme === 'light' ? 'rgba(255, 255, 255, 0.98)' : 'rgba(26, 26, 26, 0.98)',\n      backdropFilter: 'blur(12px)',\n      borderRadius: '10px',\n      boxShadow: '0 8px 32px rgba(0, 0, 0, 0.3)',\n    },\n    'bottom-left': { \n      position: 'fixed' as const, \n      bottom: '8px', \n      left: '8px',\n      transform: isExpanded ? 'none' : 'none',\n      transformOrigin: 'bottom left',\n      backgroundColor: actualTheme === 'light' ? 'rgba(255, 255, 255, 0.98)' : 'rgba(26, 26, 26, 0.98)',\n      backdropFilter: 'blur(12px)',\n      borderRadius: '10px',\n      boxShadow: '0 8px 32px rgba(0, 0, 0, 0.3)',\n    },\n    'top-right': { \n      position: 'fixed' as const, \n      top: '8px', \n      right: '8px',\n      transform: isExpanded ? 'none' : 'none',\n      transformOrigin: 'top right',\n      backgroundColor: actualTheme === 'light' ? 'rgba(255, 255, 255, 0.98)' : 'rgba(26, 26, 26, 0.98)',\n      backdropFilter: 'blur(12px)',\n      borderRadius: '10px',\n      boxShadow: '0 8px 32px rgba(0, 0, 0, 0.3)',\n    },\n    'top-left': { \n      position: 'fixed' as const, \n      top: '8px', \n      left: '8px',\n      transform: isExpanded ? 'none' : 'none',\n      transformOrigin: 'top left',\n      backgroundColor: actualTheme === 'light' ? 'rgba(255, 255, 255, 0.98)' : 'rgba(26, 26, 26, 0.98)',\n      backdropFilter: 'blur(12px)',\n      borderRadius: '10px',\n      boxShadow: '0 8px 32px rgba(0, 0, 0, 0.3)',\n    },\n    'pane': { \n      position: 'fixed' as const, \n      bottom: isCollapsed ? '-100%' : '0',\n      left: '0',\n      right: '0',\n      backgroundColor: actualTheme === 'light' ? 'rgba(255, 255, 255, 0.98)' : 'rgba(26, 26, 26, 0.98)',\n      backdropFilter: 'blur(12px)',\n      borderRadius: '0',\n      borderTop: `0.5px solid ${actualTheme === 'light' ? 'rgba(229, 231, 235, 0.5)' : 'rgba(255, 255, 255, 0.08)'}`,\n      boxShadow: '0 -8px 32px rgba(0, 0, 0, 0.3)',\n    },\n  };\n  \n  // Theme classes - removed since we're using inline styles for background\n  const themeClasses = actualTheme === 'light' \n    ? 'text-gray-900'\n    : 'text-white';\n  \n  const activeTabContent = tabs.find(tab => tab.id === activeTab);\n  \n  // Lazy render tab content only when tab is active and panel is open\n  const renderTabContent = useCallback(() => {\n    if (isCollapsed || !activeTabContent) return null;\n    \n    return typeof activeTabContent.content === 'function' \n      ? activeTabContent.content() \n      : activeTabContent.content;\n  }, [isCollapsed, activeTabContent]);\n  \n  return (\n    <>\n      {/* Bug button - always visible */}\n      <button\n        onClick={() => setIsCollapsed(!isCollapsed)}\n        style={{\n          ...buttonStyles[position],\n          width: '32px',\n          height: '32px',\n          borderRadius: '50%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          padding: '8px',\n          backgroundColor: actualTheme === 'light' ? '#ffffff' : '#0a0a0a',\n          backgroundImage: actualTheme === 'dark' ? 'linear-gradient(135deg, #0a0a0a, #1a1a1a)' : 'none',\n          border: 'none',\n          outline: 'none',\n          cursor: 'pointer',\n          transition: 'all 0.2s cubic-bezier(0.4, 0, 0.2, 1)',\n          boxShadow: actualTheme === 'light' \n            ? '0 0 0 1px rgba(0, 0, 0, 0.08), 0 2px 4px rgba(0, 0, 0, 0.04), 0 4px 8px rgba(0, 0, 0, 0.04)'\n            : '0 0 0 1px rgba(255, 255, 255, 0.1), 0 2px 4px rgba(0, 0, 0, 0.3), 0 4px 8px rgba(0, 0, 0, 0.3)',\n        }}\n        onMouseEnter={(e) => {\n          e.currentTarget.style.transform = 'scale(1.08)';\n          e.currentTarget.style.boxShadow = actualTheme === 'light'\n            ? '0 0 0 1px rgba(0, 0, 0, 0.12), 0 4px 8px rgba(0, 0, 0, 0.08), 0 8px 16px rgba(0, 0, 0, 0.08)'\n            : '0 0 0 1px rgba(255, 255, 255, 0.15), 0 4px 8px rgba(0, 0, 0, 0.4), 0 8px 16px rgba(0, 0, 0, 0.4)';\n        }}\n        onMouseLeave={(e) => {\n          e.currentTarget.style.transform = 'scale(1)';\n          e.currentTarget.style.boxShadow = actualTheme === 'light'\n            ? '0 0 0 1px rgba(0, 0, 0, 0.08), 0 2px 4px rgba(0, 0, 0, 0.04), 0 4px 8px rgba(0, 0, 0, 0.04)'\n            : '0 0 0 1px rgba(255, 255, 255, 0.1), 0 2px 4px rgba(0, 0, 0, 0.3), 0 4px 8px rgba(0, 0, 0, 0.3)';\n        }}\n        onMouseDown={(e) => {\n          e.currentTarget.style.transform = 'scale(0.95)';\n        }}\n        onMouseUp={(e) => {\n          e.currentTarget.style.transform = 'scale(1)';\n        }}\n        title={isCollapsed ? `Show ${title.toLowerCase()} toolbar` : `Hide ${title.toLowerCase()} toolbar`}\n        className={className}\n      >\n        {customIcon || (\n          <Bug \n            style={{\n              width: '16px',\n              height: '16px',\n              transition: 'transform 0.3s cubic-bezier(0.4, 0, 0.2, 1)',\n              transform: isCollapsed ? 'rotate(0deg)' : 'rotate(180deg)',\n              color: actualTheme === 'light' ? '#374151' : '#d1d5db',\n            }}\n            suppressHydrationWarning\n            aria-hidden=\"true\"\n          />\n        )}\n      </button>\n      \n      {/* Dev toolbar panel */}\n      {!isCollapsed && (\n        <div className={`${themeClasses}\n                        ${position !== 'pane' ? 'shadow-2xl shadow-black/50' : ''}\n                        ${className}`}\n             style={{ \n               ...panelStyles[position], \n               width: position === 'pane' ? '100%' : (isExpanded ? '80%' : width), \n               maxWidth: position === 'pane' ? '100%' : (isExpanded ? '1200px' : '600px'),\n               height: position === 'pane' ? paneHeight : (isExpanded ? '70vh' : maxHeight),\n               maxHeight: position === 'pane' ? paneHeight : (isExpanded ? '800px' : maxHeight),\n               transition: position === 'pane' \n                 ? 'bottom 0.3s cubic-bezier(0.4, 0, 0.2, 1)' \n                 : 'width 0.3s cubic-bezier(0.4, 0, 0.2, 1), height 0.3s cubic-bezier(0.4, 0, 0.2, 1), max-width 0.3s cubic-bezier(0.4, 0, 0.2, 1), max-height 0.3s cubic-bezier(0.4, 0, 0.2, 1)',\n               display: 'flex',\n               flexDirection: 'column',\n               overflow: 'hidden',\n               zIndex: 9998,\n               border: position !== 'pane' \n                 ? `1px solid ${actualTheme === 'light' ? 'rgba(0, 0, 0, 0.08)' : 'rgba(255, 255, 255, 0.05)'}`\n                 : 'none',\n             }}>\n          {/* Resize handle for pane mode */}\n          {position === 'pane' && (\n            <div \n              onMouseDown={() => setIsResizing(true)}\n              style={{\n                height: '5px',\n                cursor: 'ns-resize',\n                backgroundColor: 'transparent',\n                transition: 'background-color 0.2s',\n              }}\n              onMouseEnter={(e) => {\n                e.currentTarget.style.backgroundColor = actualTheme === 'light' \n                  ? 'rgba(59, 130, 246, 0.1)' \n                  : 'rgba(59, 130, 246, 0.2)';\n              }}\n              onMouseLeave={(e) => {\n                if (!isResizing) {\n                  e.currentTarget.style.backgroundColor = 'transparent';\n                }\n              }}\n            />\n          )}\n          {/* Header with title bar and close button */}\n          <div style={{ \n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'space-between',\n            borderBottom: `1px solid ${actualTheme === 'light' ? '#e5e7eb' : 'rgba(55, 65, 81, 0.5)'}`,\n            paddingLeft: '8px',\n            paddingRight: '4px',\n            paddingTop: '3px',\n            paddingBottom: '3px',\n            height: '24px',\n            flexShrink: 0,\n          }}>\n            <h3 style={{ \n              ...typography.title,\n              color: actualTheme === 'light' ? '#374151' : '#e5e7eb'\n            }}>{title}</h3>\n            <div style={{ display: 'flex', gap: '4px', alignItems: 'center' }}>\n              {position !== 'pane' && (\n                <button\n                  onClick={() => setIsExpanded(!isExpanded)}\n                  style={{\n                    background: 'transparent',\n                    border: 'none',\n                    cursor: 'pointer',\n                    width: '24px',\n                    height: '24px',\n                    padding: '5px',\n                    borderRadius: '4px',\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    transition: 'all 0.15s ease',\n                    color: actualTheme === 'light' ? '#9ca3af' : '#6b7280',\n                  }}\n                  onMouseEnter={(e) => {\n                    e.currentTarget.style.backgroundColor = actualTheme === 'light' ? 'rgba(0, 0, 0, 0.08)' : 'rgba(255, 255, 255, 0.08)';\n                    e.currentTarget.style.color = actualTheme === 'light' ? '#374151' : '#e5e7eb';\n                    e.currentTarget.style.transform = 'scale(1.1)';\n                  }}\n                  onMouseLeave={(e) => {\n                    e.currentTarget.style.backgroundColor = 'transparent';\n                    e.currentTarget.style.color = actualTheme === 'light' ? '#9ca3af' : '#6b7280';\n                    e.currentTarget.style.transform = 'scale(1)';\n                  }}\n                  title={isExpanded ? \"Collapse toolbar\" : \"Expand toolbar\"}\n                  aria-label={isExpanded ? \"Collapse toolbar\" : \"Expand toolbar\"}\n                >\n                  {isExpanded ? (\n                    <Minimize2 style={{ width: '14px', height: '14px' }} />\n                  ) : (\n                    <Maximize2 style={{ width: '14px', height: '14px' }} />\n                  )}\n                </button>\n              )}\n              <button\n                onClick={() => setIsCollapsed(true)}\n              style={{\n                background: 'transparent',\n                border: 'none',\n                cursor: 'pointer',\n                width: '24px',\n                height: '24px',\n                padding: '5px',\n                borderRadius: '4px',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                transition: 'all 0.15s ease',\n                color: actualTheme === 'light' ? '#9ca3af' : '#6b7280',\n              }}\n              onMouseEnter={(e) => {\n                e.currentTarget.style.backgroundColor = actualTheme === 'light' ? 'rgba(0, 0, 0, 0.08)' : 'rgba(255, 255, 255, 0.08)';\n                e.currentTarget.style.color = actualTheme === 'light' ? '#374151' : '#e5e7eb';\n                e.currentTarget.style.transform = 'scale(1.1)';\n              }}\n              onMouseLeave={(e) => {\n                e.currentTarget.style.backgroundColor = 'transparent';\n                e.currentTarget.style.color = theme === 'light' ? '#9ca3af' : '#6b7280';\n                e.currentTarget.style.transform = 'scale(1)';\n              }}\n              title=\"Close toolbar\"\n              aria-label=\"Close toolbar\"\n            >\n              <X \n                style={{ width: '14px', height: '14px' }}\n                suppressHydrationWarning\n                aria-hidden=\"true\"\n              />\n            </button>\n            </div>\n          </div>\n          \n          {/* Tabs - Fixed height when present */}\n          {tabs.length > 1 && (\n            <div style={{ \n              display: 'flex',\n              borderBottom: `1px solid ${actualTheme === 'light' ? '#e5e7eb' : 'rgba(55, 65, 81, 0.5)'}`,\n              height: '30px',\n              flexShrink: 0,\n            }}>\n              {tabs.map(({ id, label, icon }) => {\n                const Icon = icon;\n                return (\n                <button\n                  key={id}\n                  onClick={() => setActiveTab(id)}\n                  onMouseEnter={(e) => {\n                    if (activeTab !== id) {\n                      e.currentTarget.style.background = actualTheme === 'light' \n                        ? 'rgba(243, 244, 246, 0.9)' \n                        : 'rgba(55, 65, 81, 0.8)';\n                      e.currentTarget.style.backdropFilter = 'blur(12px)';\n                      e.currentTarget.style.color = actualTheme === 'light' ? '#111827' : '#ffffff';\n                      e.currentTarget.style.transform = 'translateY(-1px)';\n                      e.currentTarget.style.boxShadow = actualTheme === 'light'\n                        ? 'inset 0 1px 3px rgba(0, 0, 0, 0.05)'\n                        : 'inset 0 1px 3px rgba(255, 255, 255, 0.05)';\n                      const icon = e.currentTarget.querySelector('svg');\n                      if (icon) {\n                        (icon as SVGSVGElement).style.transform = 'scale(1.15) rotate(5deg)';\n                      }\n                    }\n                  }}\n                  onMouseLeave={(e) => {\n                    if (activeTab !== id) {\n                      e.currentTarget.style.background = 'transparent';\n                      e.currentTarget.style.backdropFilter = 'none';\n                      e.currentTarget.style.color = actualTheme === 'light' ? '#6b7280' : '#9ca3af';\n                      e.currentTarget.style.transform = 'translateY(0)';\n                      e.currentTarget.style.boxShadow = 'none';\n                      const icon = e.currentTarget.querySelector('svg');\n                      if (icon) {\n                        (icon as SVGSVGElement).style.transform = 'scale(1) rotate(0deg)';\n                      }\n                    }\n                  }}\n                  style={{\n                    flex: 1,\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    gap: '4px',\n                    padding: '6px 10px',\n                    ...typography.tab,\n                    background: activeTab === id \n                      ? (actualTheme === 'light' ? '#f9fafb' : '#1f2937')\n                      : 'transparent',\n                    color: activeTab === id\n                      ? (actualTheme === 'light' ? '#111827' : '#ffffff')\n                      : (actualTheme === 'light' ? '#6b7280' : '#9ca3af'),\n                    borderTop: 'none',\n                    borderLeft: 'none',\n                    borderRight: 'none',\n                    borderBottom: activeTab === id ? `2px solid ${actualTheme === 'light' ? '#3b82f6' : '#60a5fa'}` : `2px solid transparent`,\n                    cursor: 'pointer',\n                    transition: 'all 0.2s cubic-bezier(0.4, 0, 0.2, 1)',\n                    transform: 'translateY(0)',\n                    position: 'relative' as const,\n                  }}\n                >\n                  {Icon && (\n                    <Icon \n                      size={10}\n                      className=\"devbar-icon\"\n                    />\n                  )}\n                  <span>{label}</span>\n                </button>\n              )})}\n            </div>\n          )}\n          \n          {/* Content - Fixed height with scrolling */}\n          <div style={{ flex: 1, overflowY: 'auto', overflowX: 'hidden', minHeight: 0 }}>\n            <div style={{ padding: '8px' }}>\n              {renderTabContent()}\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\n// Export with React.memo for performance optimization\nexport const DevToolbar = React.memo(DevToolbarComponent);\n\n// Export a simple hook for creating toolbar tabs\nexport const useDevToolbarTab = (\n  id: string,\n  label: string,\n  icon: ComponentType<{ size?: number | string; className?: string }> | undefined,\n  content: ReactNode | (() => ReactNode)\n): DevToolbarTab => {\n  return { id, label, icon, content };\n};\n\n// Export utility components for consistent styling\nexport const DevToolbarSection: React.FC<{ \n  title?: string; \n  children: ReactNode;\n  className?: string;\n  theme?: 'light' | 'dark';\n}> = ({ title, children, className = '', theme = 'dark' }) => {\n  const effectiveTheme = theme; // Direct use since these are simple utility components\n  return (\n    <div style={{ marginBottom: '8px' }} className={className}>\n      {title && (\n        <div style={{ \n          ...typography.sectionTitle,\n          marginBottom: '4px',\n          color: effectiveTheme === 'light' ? '#6b7280' : '#9ca3af'\n        }}>\n          {title}\n        </div>\n      )}\n      <div style={{ display: 'flex', flexDirection: 'column', gap: '2px' }}>\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport const DevToolbarButton: React.FC<{\n  onClick: () => void;\n  variant?: 'default' | 'success' | 'warning' | 'danger' | 'primary';\n  size?: 'sm' | 'xs';\n  children: ReactNode;\n  className?: string;\n}> = ({ onClick, variant = 'default', size = 'xs', children, className = '' }) => {\n  const getVariantStyles = (variant: string) => {\n    const styles: Record<string, React.CSSProperties> = {\n      default: {\n        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\n        border: '1px solid rgba(118, 75, 162, 0.3)',\n        boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',\n      },\n      primary: {\n        background: 'linear-gradient(135deg, #667eea 0%, #4c6ef5 100%)',\n        border: '1px solid rgba(76, 110, 245, 0.3)',\n        boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',\n      },\n      success: {\n        background: 'linear-gradient(135deg, #56ab2f 0%, #10b981 100%)',\n        border: '1px solid rgba(16, 185, 129, 0.3)',\n        boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',\n      },\n      warning: {\n        background: 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)',\n        border: '1px solid rgba(245, 87, 108, 0.3)',\n        boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',\n      },\n      danger: {\n        background: 'linear-gradient(135deg, #fa709a 0%, #f5576c 100%)',\n        border: '1px solid rgba(245, 87, 108, 0.3)',\n        boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',\n      },\n    };\n    return styles[variant] || styles.default;\n  };\n\n  const baseStyles = getVariantStyles(variant);\n  const [isHovered, setIsHovered] = useState(false);\n  const [isPressed, setIsPressed] = useState(false);\n  \n  return (\n    <button\n      onClick={onClick}\n      className={className}\n      style={{\n        ...typography.button[size],\n        ...baseStyles,\n        borderRadius: '6px',\n        color: 'white',\n        cursor: 'pointer',\n        display: 'inline-flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        fontWeight: 500,\n        padding: size === 'xs' ? '4px 10px' : '6px 14px',\n        transition: 'all 0.1s ease',\n        opacity: isPressed ? 0.9 : isHovered ? 0.95 : 1,\n        filter: isHovered ? 'brightness(1.1)' : 'brightness(1)',\n        boxShadow: isPressed \n          ? 'inset 0 2px 4px rgba(0, 0, 0, 0.15)' \n          : isHovered\n          ? '0 4px 8px rgba(0, 0, 0, 0.15)'\n          : baseStyles.boxShadow,\n      }}\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => {\n        setIsHovered(false);\n        setIsPressed(false);\n      }}\n      onMouseDown={() => setIsPressed(true)}\n      onMouseUp={() => setIsPressed(false)}\n    >\n      {children}\n    </button>\n  );\n};\n\nexport const DevToolbarInfo: React.FC<{\n  label: string;\n  value: string | number | boolean;\n  className?: string;\n  theme?: 'light' | 'dark';\n}> = ({ label, value, className = '', theme = 'dark' }) => {\n  const effectiveTheme = theme;\n  return (\n    <div style={{ \n      ...typography.info, \n      color: effectiveTheme === 'light' ? '#374151' : '#e5e7eb' \n    }} className={className}>\n      <span style={{ color: effectiveTheme === 'light' ? '#6b7280' : '#9ca3af' }}>{label}:</span> {String(value)}\n    </div>\n  );\n};\n\nexport const DevToolbarToggle: React.FC<{\n  checked: boolean;\n  onChange: (checked: boolean) => void;\n  label?: string;\n  className?: string;\n  theme?: 'light' | 'dark';\n}> = ({ checked, onChange, label, className = '', theme = 'dark' }) => {\n  const effectiveTheme = theme;\n  return (\n    <div style={{ \n      display: 'flex', \n      alignItems: 'center', \n      justifyContent: 'space-between',\n      gap: '8px',\n      ...typography.info \n    }} className={className}>\n      {label && (\n        <span style={{ color: effectiveTheme === 'light' ? '#6b7280' : '#9ca3af', flex: 1 }}>{label}</span>\n      )}\n      <button\n        onClick={() => onChange(!checked)}\n        style={{\n          position: 'relative',\n          display: 'inline-flex',\n          alignItems: 'center',\n          height: '20px',\n          width: '36px',\n          borderRadius: '9999px',\n          backgroundColor: checked ? '#3b82f6' : '#4b5563',\n          transition: 'background-color 0.2s',\n          border: 'none',\n          cursor: 'pointer',\n          padding: 0,\n        }}\n      >\n        <span\n          style={{\n            display: 'inline-block',\n            height: '14px',\n            width: '14px',\n            borderRadius: '50%',\n            backgroundColor: 'white',\n            transition: 'transform 0.2s',\n            transform: checked ? 'translateX(18px)' : 'translateX(3px)',\n          }}\n        />\n      </button>\n    </div>\n  );\n};",
      "type": "registry:component",
      "target": "components/devbar/devtoolbar.tsx"
    }
  ]
}